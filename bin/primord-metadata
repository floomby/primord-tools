#!/usr/bin/env ruby

# TODO write to output file
# TODO tabs vs space consistency
# TODO other useful things

module Utils
    def self.print_usage
        puts "./metadaer.rb <pyerr|pylog|bgdist> <param,param,...> <files>"
    end
    def self.count_lines file
        lines = 0
        file.each_line { |l| lines += 1 }
        file.rewind
        lines
    end
    def self.extract_date str
        a = str.match /.*([0-9]{4})([0-9]{2})([0-9]{2})/
        "#{a[2]}-#{a[3]}-#{a[1]}"
    end
end # class Stuff

# classes for each type of file we want to
# work with
class DataFile
    @@params
    def initialize filename
        @data = {}
        @data['file'] = filename
        @file = File.open filename, 'r'

        def self.write
            str = ""
            @@params.each do |param|
                str += "#{@data[param]},"
            end
            puts str[0..-2]
        end
    end
    def self.format= params
        @@params = params
        str = ""
        @@params.each do |param|
            str += "#{param},"
        end
        puts str[0..-2]
    end
end

class Pyerr < DataFile
    def initialize filename
        super
        # count the lines
        @data['lines'] = Utils::count_lines @file
        # get the date		
        @data['date'] = Utils::extract_date filename
    end
end # class DataFile

class Pylog < DataFile
    def initialize filename
        super
        # count the lines
        @data['lines'] = Utils::count_lines @file
        # get the date		
        @data['date'] = Utils::extract_date filename
    end
end # class Pylog

class Bgdist < DataFile
    def initialize filename
        super
        # count the lines
        @data['lines'] = Utils::count_lines @file
        # get the date		
        @data['date'] = Utils::extract_date filename
    end
end # class BGdist

# main

directive = ARGV.shift
case directive
when 'help'
    Utils::print_usage
    exit 0
else
    params = []
    ARGV.shift.gsub(/([^,]+)/){ |p| params << p }
    DataFile::format = params
    clas = Object.const_get directive.capitalize
end

objs = []
ARGV.each do |filename|
    objs << (clas.new filename)
end

objs.each do |obj|
    obj.write
end
